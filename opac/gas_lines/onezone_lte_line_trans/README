This is a simple python code for LTE radiative transfer of a one-zone model.
As input it uses the standard RADMC-3D dust opacity and molecule files.
Here an example for each is provided. The molecular data file is the one
for CO taken from the LAMDA database at Leiden Observatory. The file was
renamed from co.dat to molecule_co.inp but the contents are the same.

To run the test case:

   ipython --matplotlib

   from onezone_lte_line_trans import *
   q=test()

This should bring up a plot of a line profile, with the y-axis in log.
The line is an inverted parabola (because of the y-log) that flattens
off at the bottom (because of the dust continuum). The top straight
line is the Planck function for comparison.

Since the function test() returns a class containing all the results
of the computation, you can continue to plot things, e.g. the optical
depth:

   f=plt.figure()
   plt.plot(q.dvkms,q.tau)
   plt.yscale('log')
   plt.show()

The test() function is just an example setup. The actual way to use
the onezone model is as follows (for example):

   from onezone_lte_line_trans import *
   q = onezone_lte_line_trans(dust='silicate',molecule='co',dvkmsmax=1.0,nv=301)
   q.colgas = 1e-4      # Column density in gram-of-gas/cm^2
   q.temp   = 60.       # Temperature of the gas in K
   q.vturb  = 1e-1*1e5  # Turbulent velocity in cm/s
   q.iline  = 1         # Line 1 of the molecule file (the J=2-1 of CO)
   q.doall()

The q.doall() computes everything for this setup. You can now plot stuff,
for instance:

   plt.plot(q.dvkms,q.intensity,label='Result')
   plt.plot(q.dvkms,q.bpl,label='Planck')
   plt.legend()
   plt.yscale('log')
   plt.xlabel(r'$\Delta v [\mathrm{km/s}]$')
   plt.ylabel(r'$I_\nu [\mathrm{erg}\,\mathrm{cm}^{-2}\mathrm{s}^{-1}\mathrm{Hz}^{-1}\mathrm{ster}^{-1}]$')
   plt.show()

If you are mainly interested in line center and continuum, you can also do
a much smaller grid of velocity bins:

   from onezone_lte_line_trans import *
   q = onezone_lte_line_trans(dust='silicate',molecule='co',dvkmsmax=30.0,nv=3)
   q.colgas = 1e-4      # Column density in gram-of-gas/cm^2
   q.temp   = 60.       # Temperature of the gas in K
   q.vturb  = 1e-1*1e5  # Turbulent velocity in cm/s
   q.iline  = 1         # Line 1 of the molecule file (the J=2-1 of CO)
   q.doall()
   int_linecenter = q.intensity[1]
   int_continuum  = q.intensity[0]

You can also include a background intensity, for instance:

   from onezone_lte_line_trans import *
   q = onezone_lte_line_trans(dust='silicate',molecule='co',dvkmsmax=1.0,nv=301)
   q.colgas = 1e-2      # Column density in gram-of-gas/cm^2
   q.temp   = 60.       # Temperature of the gas in K
   q.vturb  = 1e-1*1e5  # Turbulent velocity in cm/s
   q.iline  = 1         # Line 1 of the molecule file (the J=2-1 of CO)
   q.bgint  = 1e-12     # A background intensity (can also be an array)
   q.doall()
   plt.plot(q.dvkms,q.intensity,label='Result')
   plt.plot(q.dvkms,q.bpl,label='Planck')
   plt.legend()
   plt.yscale('log')
   plt.xlabel(r'$\Delta v [\mathrm{km/s}]$')
   plt.ylabel(r'$I_\nu [\mathrm{erg}\,\mathrm{cm}^{-2}\mathrm{s}^{-1}\mathrm{Hz}^{-1}\mathrm{ster}^{-1}]$')
   plt.show()

2017.08.20
